#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# default value
MEMO=${MEMO:-${SCRIPT_DIR}/sample/memo.md} # must be set
MEMO_TEMP=${MEMO_TEMP:-${SCRIPT_DIR}/sample/memo_temp.md} # if 0t flag is enable
MEMO_BACKUP_DIR=${MEMO_BACKUP_DIR:-${SCRIPT_DIR}/sample/backup/} # if -b flag is enable
EDITOR=${EDITOR:-notepad} # nvim, nano, notepad etc.

# initial flag
transfer=false
backup=false
verbose=false
y_f=0
d_f=0
date=""
message=""
inserted_line=""
inserted_date_line=""

updateHeader () {
    all_date_header="$(grep -nE "${date_header_regex}" $MEMO)" # load all header to $all_date_header
    ${verbose} && echo "memo: updateHeader"
}

checkFileUsuable() {
    if [ ! -e "$1" ]; then
        echo "error: file $1 does not exist."
        exit 1
    elif [ ! -f "$1" ]; then
        echo "error: file $1 exists but is not a regular file."
        exit 1
    elif [ ! -r "$1" ]; then 
        echo "error: file $1 exists but is not readable."
        exit 1
    elif [ ! -w "$1" ]; then 
        echo "error: file exists but is not writable."
        exit 1
    fi
}

printHelp() {
    echo "Usage: memo [OPTION] ... [MESSAGE] ..."
    echo "Bash script to quickly write thing down"
    echo "Example:"
    echo "  \`memo\`"
    echo "  \`memo hello world\`"
    echo "  \`memo -m \"hello, world!!\"\`"
    echo ""
    echo "Variable:"
    echo "  \$MEMO              file that memo will add message to target header" 
    echo "  \$MEMO_TEMP         (optional, if -t OPTION is enable) file that its content will be add to target header of \$MEMO"
    echo "                      its content will be erased as a result"
    echo "  \$MEMO_BACKUP_DIR   (optional, if -b OPTION is enable) directory that memo will use as backup"
    echo ""
    echo "Option:"
    echo "  -y, --yesterday     change target header from today to N days from today"
    echo "  -d, --date          change target header to DATE header (in YYYY-MM-DD format)"
    echo "  -m, --message       add message to target header"
    echo "                      by default, any argument after all OPTION will be the added message"
    echo "  -t, --tranfer       add message from \$MEMO_TEMP to \$MEMO to target header"
    echo "                      the content inside \$MEMO_TEMP will be erased as a result"
    echo "  -b, --backup        make a copy of both \$MEMO (and \$MEMO_TEMP if -t enable) to \$MEMO_BACKUP_DIR"
    echo "                      the copy will be named with unique timestamp"
    echo "  -v, --verbose       if enable, memo will print more log to stdout"
    echo "  -h, --help          print this message"
    echo ""
    echo "If no insertion target is specified, the default insertion point will be under today header"
    echo "If there are no OPTIONs or any message specified, memo will open \$MEMO in default \$EDITOR"
}

if [ -z "${MEMO}" ]; then
    echo "memo: \$MEMO is not set, you can set it inside \`memo\` script "
    exit 1
fi

checkFileUsuable ${MEMO}

# if only `memo` is entered, open editor
if [[ ${#} -eq "0" ]]; then
    ${EDITOR} ${MEMO}
    exit 0
fi

# prevent y and d flag overlapped
if [[ " $* " == *" -d "* || " $* " == *" --date "* ]]; then
    if [[ " $* " == *" -y"* || " $* " == *" --yesterday "* ]]; then
        echo "error: -d (or --date) is not compatible with -y. please pick one or another"
        exit 1
    fi
fi

# initialize/preparing $MEMO + loading date header.
valid_date_regex="[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))"
date_header_regex="^## \[\[${valid_date_regex}\]\]$"

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            printHelp
            exit 0
            ;;
        -t|--transfer)
            checkFileUsuable ${MEMO_TEMP}
            transfer=true
            shift
            ;;
        -b|--backup)
            backup=true
            if [[ -z ${MEMO_BACKUP_DIR} ]]; then
                echo "error: \$MEMO_BACKUP_DIR is not set. you can set it inside \`memo\` script"
                exit 1
            elif [[ ! -d ${MEMO_BACKUP_DIR} ]]; then
                echo "error: ${MEMO_BACKUP_DIR} does not exist."
                exit 1
            fi
            shift
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -[y]*|--yesterday) 
            if [[ $2 =~ ^[0-9]+$ ]]; then
                y_f=$2
                shift
            elif [[ $1 =~ -[y]* ]]; then
                y_ff="$1"
                y_f=$((${#y_ff}-1))
            else
                echo "error: -y require valid number"
                exit 1
            fi
            shift
            ;;
        -d|--date)
            if [[ -z $2 ]]; then
                echo "error: -d require additional argv (date)"
                exit 1
            elif [[ ! $2 =~ $valid_date_regex ]]; then
                echo "error: -d require argv with valid date (yyyy-mm-dd) separate by dash (-)"
                exit 1
            fi
            d_f=1
            date="$2"
            shift
            shift
            ;;
        -m|--message)  
            if [[ -z $2 ]]; then
                echo "error: -m require additional argv (message)"
                exit 1
            fi
            message="$2"
            shift
            shift
            ;;
        -*|--*)
            echo "error: unknown option -$1. try \`memo -h (--help)\` for more information"
            exit 1
            shift
            ;;
        *) 
            message="${*}"
            break
            ;;
    esac
done

${verbose} && echo "memo: task started, do not open or edit ${MEMO} until the task reaches the end"

# handle b flag, create a copy of $MEMO to $MEMO_BACKUP_DIR
if [[ ${backup} == true ]]; then
    memo_hiccup="$(basename ${MEMO%.*}).$(date +%Y%m%dt%H%M%S).${MEMO##*.}.bak"
    sed '' ${MEMO} > $MEMO_BACKUP_DIR/$memo_hiccup
    ${verbose} && echo "memo: -b options: making backup of $MEMO inside $MEMO_BACKUP_DIR directory"
    if [[ ${transfer} == true ]]; then
        memo_temp_hiccup="$(basename ${MEMO_TEMP%.*}).$(date +%Y%m%dt%H%M%S).${MEMO_TEMP##*.}.bak"
        sed '' ${MEMO_TEMP} > $MEMO_BACKUP_DIR/$memo_temp_hiccup
        ${verbose} && echo "memo: -b options: making backup of $MEMO_TEMP inside $MEMO_BACKUP_DIR directory"
    fi
fi 
echo '## [[1000-10-10]]' >> ${MEMO} # this is so stupid

# create today h2 if it doens't exist
updateHeader

today="$(date +%Y-%m-%d)"
today_regex="(([0-9]+):## \[\[${today}\]\])"
${verbose} && echo "memo: today is ${today}"

# make today if doesn't exist
if [[ ! $all_date_header =~ $today_regex ]]; then
    sed -i "4i\\\#\#\ [\[${today}\]\]\n" ${MEMO} # if today header is not found. insert it at 4 lines
    updateHeader
    ${verbose} && echo "memo: created today header since it doesn't exist"
fi

# default $inserted_line is today
inserted_line="$(echo "${all_date_header}" | grep -E "${today_regex}" | cut -d : -f 1 | head -n 1)"
${verbose} && echo "memo: default \$inserted_line is line ${inserted_line}"

# TODO make this reusable with d flag. this is a mess
if [[ ! "${y_f}" == 0 ]]; then # handle y flag
    for (( i = 0; i <= ${y_f}; i++)); do
        date="$(date -d "$i days ago" +%Y-%m-%d)"
        date_regex="(([0-9]+):## \[\[${date}\]\])"
        if [[ ${all_date_header} =~ ${date_regex} ]]; then # check if date exist
            inserted_date_line="$(echo "${all_date_header}" | grep "${date}" -A 1 | cut -d : -f 1 | tail -n 1)"
            ${verbose} && echo "memo: -y option: memo has found insertion for target date at ${inserted_date_line}"
        fi
    done
    date="$(date -d "${y_f} days ago" +%Y-%m-%d)"
    date_regex="(([0-9]+):## \[\[${date}\]\])"
    # inserted_date_line="$(echo "${all_date_header}" | grep "\#\# \[\[${today}\]\]" -A ${y_f} | cut -d : -f 1 | tail -n 1)" # i want to die
    if [[ ! ${all_date_header} =~ ${date_regex} ]]; then
        sed -i "${inserted_date_line}i\\\#\#\ [\[${date}\]\]\n" ${MEMO} # insert date
        updateHeader
        ${verbose} && echo "memo: -y option: memo has inserted \`${date}\` header since it doesn't exists."
    fi
    inserted_line="$(echo "${all_date_header}" | grep -E "${date_regex}" | cut -d : -f 1 | head -n 1)"
    ${verbose} && echo "memo: -y options: current \$inserted_line is line ${inserted_line}"
fi

# handle d flag, get inserted_line
if [[ "${d_f}" == 1 ]]; then
    if [[ ${all_date_header} =~ ${date} ]]; then
        inserted_line="$(echo "${all_date_header}" | grep "${date}" -A 1 | cut -d : -f 1 | tail -n 1)"
        ${verbose} && echo "memo: -d option: memo has found insertion for target date at ${inserted_line}"
    else
        all_date_header="$(echo "${all_date_header}" | cut -d \[ -f 3 | cut -c -10 )"
        for i in $(echo "${all_date_header}" | fold -w10); do
            if [[ "$i" < "${date}" ]]; then
                updateHeader
                inserted_date_line="$(echo "${all_date_header}" | grep "$i" | cut -d : -f 1 | tail -n 1)"
                sed -i "${inserted_date_line}i\\\#\#\ [\[${date}\]\]\n" ${MEMO} # insert date
                    updateHeader
                break
            fi
        done
    fi
    inserted_line="$(echo "${all_date_header}" | grep "${date}" | cut -d : -f 1 | tail -n 1)"
fi

# handle t flag, inserted $MEMO_TEMP content to $MEMO on $inserted_line
if [[ ${transfer} == "true" ]]; then
    sed -i -e "${inserted_line}r ${MEMO_TEMP}" -e "${inserted_line}a\\\\" ${MEMO}
    > ${MEMO_TEMP} # delete content inside $MEMO_TEMP
    ${verbose} && echo "memo: insert content of ${MEMO_TEMP} to ${MEMO} on line ${inserted_line}"
fi

# inserted $message to $inserted_line
if [[ -n ${message} && -n ${inserted_line} ]]; then
    inserted_line=$((inserted_line+1))
    sed -i "${inserted_line}i\\${message}" ${MEMO}
    ${verbose} && echo "memo: insert \`${message}\` to \`${MEMO}\` on line \`${inserted_line}\`"
fi

sed -i '$d' ${MEMO} # remove ## [[1000-10-10]], this is so stupid
${verbose} && echo "memo: task reach the end, it is now safe to open ${MEMO}"
