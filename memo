#!/bin/bash

# memo: obtf (one big text file) style logging/journaling script
# credit: Soulmine (@ne1nene1)
#
# install:
#     chmod +x memo                      make file executable  
#     mv memo /path/to/your/bin          move to you path or
#     alias memo="/path/to/this/script"  add alias to your shell config# 
#
# usage:
#     memo                               initialize memo 
#     memo                               open memo in editor 
# 
#     memo -m "hi earth"                 add message to memo to today (-m can be ommited) 
#     memo -y "hello world"              add message to memo about yesterday 
#     memo -y 7 "i walked a dog"         add message to memo about last week 
#     memo -yyy "i hate monday"          add message to memo about 3 days before 
#     memo -t "meeting with mom"         add message to memo about tomorrow 
#     memo -t 30 "i hate valentine"      add message to memo about the next 30 days 
#     memo -tttt "has to walk a dog"     add message to memo about the next 4 days 
#     
#     memo -f                            fetch message from temporary memo to memo 
#     memo -b                            make a backup of memo (and memo_temp too, if -f flag is on) 
#
# cautions:
#     depending on your env, the content of message to be put using cli may not
#     contain some special character reserved by your shell such as !," etc.
#
#     `-yy 3` will be intreprete as `three days ago (-y N format)` not 
#     `two days ago (-yyy...y)`, this is also the same as -t flag.
#     this means that if you ommited quote to insert a message, that message
#     mustn't start with number
#
# please feel free to edit this script to your liking!

# default value
MEMO_DIR="${MEMO_DIR:-.}" # must be set, always
MEMO="${MEMO:-${MEMO_DIR}/memo.md}" # must be set, always
MEMO_TEMP="${MEMO_TEMP:-${MEMO_DIR}/memo_temp.md}" # must be set only if -t flag enable
MEMO_BACKUP_DIR="${MEMO_BACKUP_DIR:-${MEMO_DIR}/.local/share/memo/}" # must be set only if -b flag is enable
EDITOR=${EDITOR:-vi} # vi, nvim, nano, notepad etc.

# initial flag
transfer=false
backup=false
verbose=false
date=""
message=""
inserted_line=""

# some constant
valid_date_regex="[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))"
today="$(date +%Y-%m-%d)"
${verbose} && echo "memo: today date is \`$date\`"

print_help() {
    echo "memo: obtf (one big text file) style logging/journaling script"
    echo "usage: memo [OPTION] [TARGET] ... [MESSAGE] ..."
    echo "example:"
    echo "  \`memo\`"
    echo "  \`memo hello world\`"
    echo "  \`memo -m \"hello, world!!\"\`"
    echo ""
    echo "variable:"
    echo "  \$MEMO              file that memo will add message to target header" 
    echo "  \$MEMO_TEMP         (optional, if -t OPTION is enable) file that its content will be add to target header of \$MEMO"
    echo "                      its content will be erased as a result"
    echo "  \$MEMO_BACKUP_DIR   (optional, if -b OPTION is enable) directory that memo will use as backup"
    echo ""
    echo "option:"
    echo "  -y, --yesterday     change target header to N days before today"
    echo "  -t, --tomorrow      change target header to N days after today"
    echo "  -d, --date          change target header to DATE header (in YYYY-MM-DD format)"
    echo "  -m, --message       add message to target header"
    echo "                      by default, any argument after all OPTION will be the added message"
    echo "  -f, --fetch         fetch message from \$MEMO_TEMP to \$MEMO to target header"
    echo "                      the content inside \$MEMO_TEMP will be erased as a result"
    echo "  -b, --backup        make a copy of both \$MEMO (and \$MEMO_TEMP if -t enable) to \$MEMO_BACKUP_DIR"
    echo "                      the copy will be named with unique timestamp"
    echo "  -v, --verbose       if enable, memo will print more log to stdout"
    echo "  -h, --help          print this messages"
    echo ""
    echo "If no insertion target is specified, the default insertion point will be under today header"
    echo "If there are no OPTIONs or any message specified, memo will open \$MEMO in a default \$EDITOR"
}

check_dir_usuable() {
    if [ ! -d "$1" ]; then
        echo "memo: directory $1 does not exist"
        mkdir "$1"
        echo "memo: directory $1 has been created"
    fi
}

check_file_usuable() {
    if [ ! -e "$1" ]; then
        echo "memo: file $1 does not exist."
        touch "$1"
        echo "memo: file $1 has been created"
        if [ "$1" == ${MEMO} ]; then 
            echo "# memo" >> "$1"
            echo "---" >> "$1"
            echo "" >> "$1"
            echo "memo: file $1 has been initialized"
        fi
    elif [ ! -f "$1" ]; then
        echo "error: file $1 exists but is not a regular file."
        exit 1
    elif [ ! -r "$1" ]; then 
        echo "error: file $1 exists but is not readable."
        exit 1
    elif [ ! -w "$1" ]; then 
        echo "error: file exists but is not writable."
        exit 1
    fi
}

# func: convertToDateHeader DATE -> formatted_DATE
get_date_header () {
    echo "## \[\[$1\]\]" # you can change this, not that i would rec
}

# func: get_insertion_line DATE -> inserted_line
# the core of this script
get_insertion_line () {
    all_date_header=($(grep -nE "${valid_date_header_regex}" $MEMO | tr -d "[]# "))
    local date_header="(([0-9]+):$1)"
    if [[ ${all_date_header[@]} =~ $date_header ]]; then
        echo $( echo "${BASH_REMATCH[0]}" | cut -d : -f 1)
        return
    fi

    for i in ${all_date_header[@]}
    do
        old_i=$i
        i=${i##*:}
        if [[ $i < $1 ]]; then
            local inserted_date_line="$(echo $old_i | cut -d : -f 1)"
            sed -i "${inserted_date_line}i$(get_date_header $1)\n" ${MEMO}
            get_insertion_line $1
            return
       fi
    done
    sed -i "\$a\\\n$(get_date_header $1)\n" ${MEMO}
    get_insertion_line $1
}


# =============================== MAIN ==================================== #
# check file and dir, if doesn't exist, create it
check_dir_usuable ${MEMO_DIR}
check_file_usuable ${MEMO}

# if only `memo` is entered, open editor
if [[ ${#} -eq "0" ]]; then
    ${EDITOR} ${MEMO}
    exit 0
fi

# a regex of valid header
valid_date_header_regex="^$(get_date_header ${valid_date_regex})$"

# prevent -d, -y, and -t clash
if [[ " $* " == *" -d "* || " $* " == *" --date "* ]]; then
    if [[ " $* " == *" -y"* || " $* " == *" --yesterday "* ]]; then
        if [[ " $* " == *" -t"* || " $* " == *" --tomorrow "* ]]; then
            echo "error: -d, -y and -t are not compatible with each other"
            exit 1
        fi
    fi
fi

# read option from user
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            print_help
            exit 1
            ;;
        -f|--fetch)
            check_file_usuable ${MEMO_TEMP}
            transfer=true
            shift
            ;;
        -b|--backup)
            check_dir_usuable ${MEMO_BACKUP_DIR}
            backup=true
            shift
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -[y]*|--yesterday) 
            if [[ $2 =~ ^[0-9]+$ ]]; then # handle `-y N` case
                y_f=$2
                shift
            elif [[ $1 =~ -[y]* ]]; then # handle `-yyy...y` case
                y_ff="$1"
                y_f=$((${#y_ff}-1))
            else
                echo "error: -y require valid number"
                exit 1
            fi
            date=$(date -d "$y_f days ago" +%Y-%m-%d)
            if [[ ! $date =~ $valid_date_regex ]]; then
                echo "error: $date is not in a valid date range"
                exit 1
            elif [[ $date == -* ]]; then
                echo "error: $date couldn't be negative value"
                exit 1
            fi
            shift
            ;;
        -[t]*|--tomorrow) 
            if [[ $2 =~ ^[0-9]+$ ]]; then # handle `-t N` case
                t_f=$2
                shift
            elif [[ $1 =~ -[t]* ]]; then # handle `-ttt...t` case
                t_ff="$1"
                t_f=$((${#t_ff}-1))
            else
                echo "error: -t require valid number"
                exit 1
            fi
            date=$(date -d "$t_f day" +%Y-%m-%d)
            if [[ ! $date =~ $valid_date_regex ]]; then
                echo "error: $date is not in a valid date range"
                exit 1
            elif [[ $date == -* ]]; then
                echo "error: $date couldn't be negative value"
                exit 1
            fi
            shift
            ;;
        -d|--date)
            date="$2"
            if [[ -z $2 ]]; then
                echo "error: -d require additional argv (date)"
                exit 1
            elif [[ ! $date =~ $valid_date_regex ]]; then
                echo "error: $2 is not in a valid date range"
                exit 1
            elif [[ $date == -* ]]; then
                echo "error: $date couldn't be negative value"
                exit 1
            fi
            shift
            shift
            ;;
        -m|--message)  
            if [[ -z $2 ]]; then
                echo "error: -m require additional argv (message)"
                exit 1
            fi
            message="$2"
            shift
            shift
            ;;
        -*|--*)
            echo "error: unknown option -$1. try \`memo -h (--help)\` for more information"
            exit 1
            shift
            ;;
        *) 
            message="${*}"
            break
            ;;
    esac
done


# backup option handler
if [[ ${backup} == true ]]; then
    # create a copy of $MEMO to $MEMO_BACKUP_DIR 
    memo_hiccup_name="$(basename ${MEMO%.*})_$(date +%Y%m%dt%H%M%S).${MEMO##*.}.bak"
    sed '' ${MEMO} > $MEMO_BACKUP_DIR/$memo_hiccup_name
    ${verbose} && echo "memo: -b options: copy content of $MEMO to $memo_hiccup inside $MEMO_BACKUP_DIR directory"
    if [[ ${transfer} == true ]]; then
        # create a copy of $MEMO_TEMP to $MEMO_BACKUP_DIR 
        memo_temp_hiccup_name="$(basename ${MEMO_TEMP%.*}).$(date +%Y%m%dt%H%M%S).${MEMO_TEMP##*.}.bak"
        sed '' ${MEMO_TEMP} > $MEMO_BACKUP_DIR/$memo_temp_hiccup_name
        ${verbose} && echo "memo: -b options: copy content of $MEMO_TEMP to $memo_hiccup inside $MEMO_BACKUP_DIR directory"
    fi
fi 

# the core program
# find a insertion point. if not found, create one.
date=${date:-${today}}
inserted_line=$(get_insertion_line $date)

# fetch from memo_temp, fectch options handler
if [[ ${transfer} == "true" ]]; then
    # inserted $MEMO_TEMP content to $MEMO on $inserted_line
    sed -i -e "${inserted_line}r ${MEMO_TEMP}" -e "${inserted_line}a\\\\" ${MEMO}
    > ${MEMO_TEMP} # delete content inside $MEMO_TEMP
    ${verbose} && echo "memo: insert content of \`${MEMO_TEMP}\` to \`${MEMO}\` on line \`${inserted_line}\`"
fi

# long form memo

# finally add message if user provided one
if [[ -n ${message} && -n ${inserted_line} ]]; then
    inserted_line=$((inserted_line+1))
    sed -i "${inserted_line}i\\${message}" ${MEMO}
    ${verbose} && echo "memo: insert \`${message}\` to \`${MEMO}\` on line \`${inserted_line}\`"
fi

