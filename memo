#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# uncomment this if you want use env instead
# MEMO="$MEMO" # must be set
# MEMO_TEMP="$MEMO_TEMP" # if -t (--transfer) flag is enable
# MEMO_BACKUP_DIR="$MEMO_BACKUP_DIR" # if -b (--backup) flag is enable
# EDITOR="$EDITOR" # nvim, nano, notepad etc

# default value
MEMO=${MEMO:-${SCRIPT_DIR}/sample/memo.md}
MEMO_TEMP=${MEMO_TEMP:-${SCRIPT_DIR}/sample/memo_temp.md}
MEMO_BACKUP_DIR=${MEMO_BACKUP_DIR:-${SCRIPT_DIR}/sample/backup/}
EDITOR=${EDITOR:-notepad}

# initial flag
transfer=false
backup=false
verbose=false
y_f=0
date=""
message=""
inserted_line=""
inserted_date_line=""

updateHeader () {
    all_date_header="$(grep -nE "${date_header_regex}" $MEMO)" # load all header to $all_date_header
}

checkFileUsuable() {
    if [ ! -e "$1" ]; then
        echo "error: file $1 does not exist."
        exit 1
    elif [ ! -f "$1" ]; then
        echo "error: file $1 exists but is not a regular file."
    elif [ ! -r "$1" ]; then 
        echo "error: file $1 exists but is not readable."
    elif [ ! -w "$1" ]; then 
        echo "error: file exists but is not writable."
    fi
}


if [ -z "${MEMO}" ]; then
    echo "memo: \$MEMO is not set, you can set it inside \`memo\` script "
    exit 1
fi

checkFileUsuable ${MEMO}

# if only `memo` is entered, open editor
if [[ ${#} -eq "0" ]]; then
    ${EDITOR} ${MEMO}
    exit 0
fi

# prevent y and d flag overlapped
if [[ " $* " == *" -d "* || " $* " == *" --date "* && " $* " == *" -y"* ]]; then
    echo "error: -d (or --date) is not compatible with -y. please pick one or another"
    exit 1
fi

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            echo "print help"
            exit 0
            ;;
        -t|--transfer)
            checkFileUsuable ${MEMO_TEMP}
            transfer=true
            shift
            ;;
        -b|--backup)
            backup=true
            if [[ -z ${MEMO_BACKUP_DIR} ]]; then
                echo "error: \$MEMO_BACKUP_DIR is not set. you can set it inside \`memo\` script"
                exit 1
            elif [[ ! -d ${MEMO_BACKUP_DIR} ]]; then
                echo "error: ${MEMO_BACKUP_DIR} does not exist."
                exit 1
            fi
            shift
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -[y]*|--yesterday) 
            if [[ $2 =~ ^[0-9]+$ ]]; then
                y_f=$2
                shift
            elif [[ $1 =~ -[y]* ]]; then
                y_ff="$1"
                y_f=$((${#y_ff}-1))
            else
                echo "error: -y require valid number"
                exit 1
            fi
            shift
            ;;
        -d|--date)
            if [[ -z $2 ]]; then
                echo "error: -d require additional argv (date)"
                exit 1
            elif [[ ! $2 =~ $valid_date_regex  ]]; then
                echo "error: -d require argv with valid date (yyyy-mm-dd) separate by dash (-)"
                exit 1
            fi
            date="$2"
            shift
            shift
            ;;
        -m|--message)  
            if [[ -z $2 ]]; then
                echo "error: -m require additional argv (message)"
                exit 1
            fi
            message="$2"
            shift
            shift
            ;;
        -*|--*)
            echo "error: unknown option -$1"
            exit 1
            shift
            ;;
        *) 
            message="${*}"
            break
            ;;
    esac
done

# handle b flag, create a copy of $MEMO to $MEMO_BACKUP_DIR
if [[ ${backup} == true ]]; then
    memo_hiccup="$(basename ${MEMO%.*}).$(date +%Y%m%dt%H%M%S).${MEMO##*.}.bak"
    memo_temp_hiccup="$(basename ${MEMO_TEMP%.*}).$(date +%Y%m%dt%H%M%S).${MEMO_TEMP##*.}.bak"
    sed '' ${MEMO} > $MEMO_BACKUP_DIR/$memo_hiccup
    sed '' ${MEMO_TEMP} > $MEMO_BACKUP_DIR/$memo_temp_hiccup
    ${verbose} && echo "memo: -b options: making backup of $MEMO and $MEMO_TEMP inside $MEMO_BACKUP_DIR directory"
fi 

# initialize/preparing $MEMO + loading date header.
valid_date_regex="[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))"
date_header_regex="^## \[\[${valid_date_regex}\]\]$"
echo '## [[1000-10-10]]' >> ${MEMO} # this is so stupid

# create today h2 if it doens't exist
updateHeader

today="$(date +%Y-%m-%d)"
today_regex="(([0-9]+):## \[\[${today}\]\])"

# make today if doesn't exist
if [[ ! $all_date_header =~ $today_regex ]]; then
    sed -i "4i\\\#\#\ [\[${today}\]\]\n" ${MEMO} # if today header is not found. insert it at 4 lines
    updateHeader
    ${verbose} && echo "memo: created today header since it doesn't exist"
fi

# default $inserted_line is today
inserted_line="$(echo "${all_date_header}" | grep -E "${today_regex}" | cut -d : -f 1 | head -n 1)"

# handle y flag, get $inserted_line
if [[ ! "${y_f}" == 0 ]]; then
    for (( i = 0; i <= ${y_f}; i++)); do
        date="$(date -d "$i days ago" +%Y-%m-%d)"
        date_regex="(([0-9]+):## \[\[${date}\]\])"
        if [[ ${all_date_header} =~ ${date_regex} ]]; then # check if date exist
            inserted_date_line="$(echo "${all_date_header}" | grep "\#\# \[\[${date}\]\]" -A 1 | cut -d : -f 1 | tail -n 1)"
        fi
    done
    date="$(date -d "${y_f} days ago" +%Y-%m-%d)"
    date_regex="(([0-9]+):## \[\[${date}\]\])"
    # inserted_date_line="$(echo "${all_date_header}" | grep "\#\# \[\[${today}\]\]" -A ${y_f} | cut -d : -f 1 | tail -n 1)" # i want to die
    if [[ ! ${all_date_header} =~ ${date_regex} ]]; then
        sed -i "${inserted_date_line}i\\\#\#\ [\[${date}\]\]\n" ${MEMO} # insert date
        updateHeader
        ${verbose} && echo "memo: -y option: memo has inserted \`${date}\` header since it doesn't exists."
    fi
    inserted_line="$(echo "${all_date_header}" | grep -E "${date_regex}" | cut -d : -f 1 | head -n 1)"
fi

# handle d flag, get $inserted_line

# handle t flag, inserted $MEMO_TEMP content to $MEMO on $inserted_line
if [[ ${transfer} == "true" ]]; then
    sed -i -e "${inserted_line}r ${MEMO_TEMP}" -e "${inserted_line}a\\\\" ${MEMO}
    > ${MEMO_TEMP} # delete content inside $MEMO_TEMP
    ${verbose} && echo "memo: insert content of ${MEMO_TEMP} to ${MEMO} on line ${inserted_line}"
fi

# inserted $message to $inserted_line
if [[ -n ${message} && -n ${inserted_line} ]]; then
    inserted_line=$((inserted_line+1))
    sed -i "${inserted_line}i\\${message}" ${MEMO}
    ${verbose} && echo "memo: insert \`${message}\` to \`${MEMO}\` on line \`${inserted_line}\`"
fi

sed  -i '$d' ${MEMO} # remove ## [[1000-10-10]], this is so stupid
